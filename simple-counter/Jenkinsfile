pipeline {
    agent any

    stages {
        stage('Build') {  /* Build Stage */
            steps {
                script {
                    // Navigate to the simple-counter directory
                    dir('simple-counter') {
                        bat 'npm install'    // Run npm install from within the simple-counter directory
                        bat 'npm run build'  // Build the React app
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    dir('simple-counter'){
                        bat 'npm run test' // Run tests using Jest
                    }
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    dir('simple-counter') {
                        bat 'npm run lint'
                    }
                }
            }
        }
        stage('Deploy to Netlify') {
            steps {
                script {
            // Zip the build folder
                    dir('simple-counter/build') {
                        bat 'zip -r ../build.zip ./*'
                    }

                        // Deploy to Netlify using the Netlify API
                        withCredentials([string(credentialsId: 'sit753-assignment-token', variable: 'NETLIFY_AUTH_TOKEN')]) {
                            def response = sh(script: '''
                                curl -X POST \
                                -H "Content-Type: application/zip" \
                                -H "Authorization: Bearer ${NETLIFY_AUTH_TOKEN}" \
                                --data-binary @build.zip \
                                "https://api.netlify.com/api/v1/sites/56890d9a-013a-4b8f-86b6-be13c10c5b1a/deploys"
                                ''', returnStdout: true)
                
                            echo "Netlify deployment response: ${response}"
                        }
                }
            }
        }
    }
}
